name: Firmware Workflow

on:
  push:
    branches:
      - "main"
    tags:
      - "*"
  pull_request:
    paths:
      - "Firmware/**"

jobs:
  make_firmware:
    runs-on: ubuntu-latest
    name: Firmware Builder

    steps:
      - uses: actions/checkout@v2
      - name: Cache pip
        uses: actions/cache@v2
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Cache PlatformIO
        uses: actions/cache@v2
        with:
          path: ~/.platformio
          key: ${{ runner.os }}-${{ hashFiles('**/lockfiles') }}
      - name: Set up Python
        uses: actions/setup-python@v2
      - name: Install PlatformIO
        run: |
          python -m pip install --upgrade pip
          pip install --upgrade platformio

      - name: Run PlatformIO
        run: cd Firmware && make

      - uses: actions/upload-artifact@v2
        with:
          name: Binaries
          path: Firmware/.pio/build/ATmega328P/firmware.*

  delint:
    runs-on: ubuntu-latest
    name: Delinter

    steps:
      - uses: actions/checkout@v2
      - name: Cache pip
        uses: actions/cache@v2
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Cache PlatformIO
        uses: actions/cache@v2
        with:
          path: ~/.platformio
          key: ${{ runner.os }}-${{ hashFiles('**/lockfiles') }}
      - name: Set up Python
        uses: actions/setup-python@v2
      - name: Install PlatformIO
        run: |
          python -m pip install --upgrade pip
          pip install --upgrade platformio

      - name: Run Delinter
        run: cd Firmware && pio check

  dev-publish:
    # publish only to devs
    runs-on: ubuntu-latest
    name: Dev-Publish
    needs: [make_firmware]

    steps:
      # Download artifacts
      - uses: actions/download-artifact@v2
        with:
          name: Binaries

      - name: send custom message with args
        uses: appleboy/discord-action@master
        with:
          webhook_id: ${{ secrets.WEBHOOK_ID }}
          webhook_token: ${{ secrets.WEBHOOK_TOKEN }}
          file: "firmware.hex"
          args: "New firmware for pendulum board!"
